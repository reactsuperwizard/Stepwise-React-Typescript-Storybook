"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS: list[str] = env("ALLOWED_HOSTS").split(",")

# Application definition

INSTALLED_APPS = [
    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # External apps
    "anymail",
    "axes",
    "captcha",
    "celery_haystack",
    "ckeditor",
    "colorfield",
    "corsheaders",
    "django_ace",
    "django_filters",
    "djcelery_email",
    "drf_recaptcha",
    "drf_spectacular",
    "haystack",
    "ordered_model",
    "phonenumber_field",
    "rest_framework",
    # Local apps
    "apps.tenants",
    "apps.rigs",
    "apps.wells",
    "apps.emps",
    "apps.projects",
    "apps.privacy",
    "apps.monitors",
    "apps.support",
    "apps.studies",
    "apps.kims",
    "apps.search",
    "apps.notifications",
    "apps.emissions",
    "django_generate_series",
]

SITE_ID = 1

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "axes.middleware.AxesMiddleware",
]

ROOT_URLCONF = "apps.app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR,
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "apps.app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": env.db(),
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = env("STATIC_URL", default="static/")

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CELERY_BROKER_URL = env(
    "CELERY_BROKER_URL",
    default="redis://localhost:6379/0",
)
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_TASK_TIME_LIMIT = 10 * 60
CELERY_TASK_SOFT_TIME_LIMIT = 5 * 60

AUTH_USER_MODEL = "tenants.User"

DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="")
SERVER_EMAIL = DEFAULT_FROM_EMAIL
EMAIL_BACKEND = env("EMAIL_BACKEND", default="")
CELERY_EMAIL_BACKEND = env("CELERY_EMAIL_BACKEND", default="")
MAILJET_API_KEY = env.str("MAILJET_API_KEY", default=None)
MAILJET_SECRET_KEY = env.str("MAILJET_SECRET_KEY", default=None)

if MAILJET_API_KEY:
    # https://anymail.dev/en/stable/esps/mailjet/
    ANYMAIL = {"MAILJET_API_KEY": MAILJET_API_KEY, "MAILJET_SECRET_KEY": MAILJET_SECRET_KEY}
else:
    EMAIL_PORT = env("EMAIL_PORT", default=25)
    EMAIL_HOST = env("EMAIL_HOST", default="")
    EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
    EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")
    EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=False)
    EMAIL_USE_SSL = env("EMAIL_USE_SSL", default=True)

SERVER_PROTOCOL = env("SERVER_PROTOCOL", default="https")

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'EXCEPTION_HANDLER': 'apps.core.api.exceptions.exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'apps.core.api.pagination.CustomPageNumberPagination',
}


SPECTACULAR_SETTINGS = {
    'TITLE': 'Stepwise API',
    'DESCRIPTION': '',
    'VERSION': '1.0.0',
    'ENUM_NAME_OVERRIDES': {
        'AssetTypeEnum': 'apps.emissions.models.AssetType',
        'RigTypeEnum': 'apps.rigs.models.RigType',
        'WellSeasonEnum': 'apps.wells.models.ConceptWell.Season',
        'AssetSeasonEnum': 'apps.emissions.models.AssetSeason',
        'EmissionReductionInitiativeTypeEnum': 'apps.emissions.models.EmissionReductionInitiativeType',
        'MaterialCategoryEnum': 'apps.emissions.models.MaterialCategory',
        'WellPlannerWellTypeEnum': 'apps.wells.models.WellPlannerWellType',
    },
}

CORS_ALLOW_ALL_ORIGINS = env('CORS_ALLOW_ALL_ORIGINS ', default=False)
CORS_URLS_REGEX = r"^/api/.*$"

if CORS_ALLOW_ALL_ORIGINS is False:
    CORS_ALLOWED_ORIGINS = env('CORS_ALLOWED_ORIGINS', default=[])
    CORS_ALLOWED_ORIGIN_REGEXES = env("CORS_ALLOWED_ORIGIN_REGEXES", default=[])

CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']
CORS_ALLOW_CREDENTIALS = True

SESSION_COOKIE_AGE = 30 * 24 * 60 * 60  # 30 days
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_DOMAIN = env("SESSION_COOKIE_DOMAIN", default=None)

CSRF_COOKIE_DOMAIN = env("CSRF_COOKIE_DOMAIN", default=None)
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_HTTPONLY = False
CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS', default=[])

MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = env.str("MEDIA_URL", default="/media/")

USE_S3 = env("USE_S3", default=False)

if USE_S3:
    INSTALLED_APPS += [
        'storages',
    ]

    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
    AWS_AUTO_CREATE_BUCKET = True
    AWS_QUERYSTRING_AUTH = False

    DEFAULT_FILE_STORAGE = 'apps.core.storage_backends.MediaStorage'
    STATICFILES_STORAGE = 'apps.core.storage_backends.StaticStorage'

FORCE_SCRIPT_NAME = env("FORCE_SCRIPT_NAME", default=None)

SIGNUP_TOKEN_EXPIRE_AFTER_DAYS = env('SIGNUP_TOKEN_EXPIRE_AFTER_DAYS', default=7)

DASHBOARD_PORT = env("DASHBOARD_PORT", default=None)

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar_Full': [
            ['Styles', 'Format', 'Bold', 'Italic', 'Underline', 'Strike', 'SpellChecker', 'Undo', 'Redo'],
            ['Link', 'Unlink', 'Anchor'],
            ['JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['NumberedList', 'BulletedList'],
            ['Source'],
        ],
        'extraPlugins': 'justify,liststyle,indent,sourcedialog',
        'forcePasteAsPlainText': False,
    },
}

LOGGING_APPS_LEVEL = env.str("LOGGING_APPS_LEVEL", default="DEBUG")
LOGGING_DJANGO_LEVEL = env.str("LOGGING_DJANGO_LEVEL", default="INFO")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{asctime}] {levelname} {name} {message}",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": LOGGING_DJANGO_LEVEL,
            "propagate": True,
        },
        "apps": {
            "handlers": ["console"],
            "level": LOGGING_APPS_LEVEL,
            "propagate": True,
        },
    },
}

AXES_LOCK_OUT_BY_USER_OR_IP = True
AXES_RESET_ON_SUCCESS = True
AXES_FAILURE_LIMIT = env.int("AXES_FAILURE_LIMIT", default=3)
AXES_COOLOFF_TIME = env.int("AXES_COOLOFF_TIME", default=1)
AXES_USERNAME_FORM_FIELD = "email"

RECAPTCHA_PRIVATE_KEY = env("RECAPTCHA_PRIVATE_KEY", default=None)
RECAPTCHA_PUBLIC_KEY = env("RECAPTCHA_PUBLIC_KEY", default=None)
DRF_RECAPTCHA_SECRET_KEY = RECAPTCHA_PRIVATE_KEY

SILENCED_SYSTEM_CHECKS = ['axes.W003']

REMOVE_ACCOUNTS_AFTER_DAYS = env("REMOVE_ACCOUNTS_AFTER_DAYS", default=5)

SENTRY_DSN = env("SENTRY_DSN", default="")
SENTRY_LEVEL = env("SENTRY_LEVEL", default="INFO")
SENTRY_EVENT_LEVEL = env("SENTRY_EVENT_LEVEL", default="INFO")

if SENTRY_DSN:
    import sentry_sdk
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.logging import LoggingIntegration

    sentry_sdk.init(  # type: ignore
        integrations=[
            DjangoIntegration(),
            CeleryIntegration(),
            LoggingIntegration(level=SENTRY_LEVEL, event_level=SENTRY_EVENT_LEVEL),
        ],
    )

ELASTICSEARCH_URL = env("ELASTICSEARCH_URL")
ELASTICSEARCH_INDEX_NAME = env("ELASTICSEARCH_INDEX_NAME")

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch7_backend.Elasticsearch7SearchEngine',
        'URL': ELASTICSEARCH_URL,
        'INDEX_NAME': ELASTICSEARCH_INDEX_NAME,
    },
}

HAYSTACK_SIGNAL_PROCESSOR = 'celery_haystack.signals.CelerySignalProcessor'

REDIS_CACHE_LOCATION = env("REDIS_CACHE_LOCATION")
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': REDIS_CACHE_LOCATION,
    }
}

KIMS_API_REQUEST_RATE = env("KIMS_API_REQUEST_RATE", default="1/s")

SYNC_VESSELS_TASK_SCHEDULE_MINUTE = env("SYNC_VESSELS_TASK_SCHEDULE_MINUTE", default="0")
