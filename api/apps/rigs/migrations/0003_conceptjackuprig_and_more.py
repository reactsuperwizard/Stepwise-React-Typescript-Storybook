# Generated by Django 4.0.2 on 2022-02-23 13:19

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('rigs', '0002_alter_conceptsemirig_draft'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConceptJackupRig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('manager', models.CharField(max_length=255, verbose_name='Manager')),
                ('design', models.CharField(max_length=255, verbose_name='Design')),
                ('build_yard', models.CharField(max_length=255, verbose_name='Build yard')),
                (
                    'rig_status',
                    models.CharField(
                        choices=[
                            ('DRILLING', 'Drilling'),
                            ('UNDER_CONSTRUCTION', 'Under Construction'),
                            ('WARM_STACKED', 'Warm Stacked'),
                            ('COLD_STACKED', 'Cold Stacked'),
                            ('MOBILIZING', 'Mobilizing'),
                        ],
                        max_length=32,
                        verbose_name='Rig status',
                    ),
                ),
                ('delivery_date', models.DateField(verbose_name='Delivery Date')),
                ('special_survey_due', models.DateField(verbose_name='Special survey date')),
                ('end_of_last_contract', models.DateField(verbose_name='End of last contract')),
                (
                    'months_in_operation_last_year',
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(12)],
                        verbose_name='Months in operation last year',
                    ),
                ),
                (
                    'months_in_operation_last_3_years',
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(36)],
                        verbose_name='Months in operation last 3 years',
                    ),
                ),
                (
                    'design_score',
                    models.CharField(
                        choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')],
                        max_length=16,
                        verbose_name='Design score',
                    ),
                ),
                (
                    'topside_design',
                    models.CharField(
                        choices=[('NOV', 'NOV'), ('MH', 'MH'), ('CAMERON', 'Cameron'), ('OTHER', 'Other')],
                        max_length=8,
                        verbose_name='Topside design',
                    ),
                ),
                (
                    'quarters_capacity',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(400),
                        ],
                        verbose_name='Quarters capacity',
                    ),
                ),
                (
                    'rig_water_depth',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(150),
                        ],
                        verbose_name='Rig water depth(ft)',
                    ),
                ),
                (
                    'variable_load',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Variable load (t)',
                    ),
                ),
                (
                    'hull_breadth',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name='Hull breadth (ft)',
                    ),
                ),
                (
                    'hull_depth',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name='Hull depth (ft)',
                    ),
                ),
                (
                    'hull_length',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name='Hull length (ft)',
                    ),
                ),
                (
                    'derrick_height',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(300),
                        ],
                        verbose_name='Derrick height (ft)',
                    ),
                ),
                (
                    'derrick_capacity',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(500000),
                            django.core.validators.MaxValueValidator(3000000),
                        ],
                        verbose_name='Derrick capacity (lbs)',
                    ),
                ),
                (
                    'drawworks_power',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                        verbose_name='Drawworks power (HP)',
                    ),
                ),
                (
                    'total_cranes',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Total cranes',
                    ),
                ),
                (
                    'crane_capacity',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name='Crane capacity',
                    ),
                ),
                (
                    'total_bop_rams',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Total BOP rams',
                    ),
                ),
                (
                    'bop_diamater_wp_max',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(30),
                        ],
                        verbose_name='BOP diameter WP Max (in)',
                    ),
                ),
                (
                    'bop_wp_max',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(5000),
                            django.core.validators.MaxValueValidator(25000),
                        ],
                        verbose_name='BOP WP Max (psi)',
                    ),
                ),
                (
                    'number_of_bop_stacks',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(3),
                        ],
                        verbose_name='Number of bop stacks',
                    ),
                ),
                (
                    'mudpump_quantity',
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Mudpump quantity',
                    ),
                ),
                (
                    'liquid_mud',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(30000),
                        ],
                        verbose_name='Liquid mud (bbl)',
                    ),
                ),
                (
                    'mud_total_power',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Mud total (HP)',
                    ),
                ),
                (
                    'shaleshaker_total',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Shaleshaker total',
                    ),
                ),
                (
                    'engine_power',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Engine power (HP)',
                    ),
                ),
                (
                    'engine_quantity',
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Engine quantity',
                    ),
                ),
                (
                    'engine_total',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100000),
                        ]
                    ),
                ),
                (
                    'generator_power',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Generator power (kW)',
                    ),
                ),
                (
                    'generator_quantity',
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(10)], verbose_name='Generator quantity'
                    ),
                ),
                (
                    'generator_total',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100000),
                        ],
                        verbose_name='Generator total',
                    ),
                ),
                ('offline_stand_building', models.BooleanField(verbose_name='Offline stand building')),
                ('auto_pipe_handling', models.BooleanField(verbose_name='Auto pipe handling')),
                ('dual_activity', models.BooleanField(verbose_name='Dual activity')),
                ('drilltronic', models.BooleanField(verbose_name='Drilltronic')),
                ('dynamic_drilling_guide', models.BooleanField(verbose_name='Dynamic drilling guide')),
                ('process_automation_platform', models.BooleanField(verbose_name='Process automation platform')),
                ('automatic_tripping', models.BooleanField(verbose_name='Automatic tripping')),
                ('closed_bus', models.BooleanField(verbose_name='Closed bus')),
                ('scr', models.BooleanField(verbose_name='SCR')),
                ('hybrid', models.BooleanField(verbose_name='Hybrid')),
                ('hvac_heat_recovery', models.BooleanField(verbose_name='HVAC heat recovery')),
                ('freshwater_cooling_systems', models.BooleanField(verbose_name='Freshwater cooling systems')),
                ('seawater_cooling_systems', models.BooleanField(verbose_name='Seawater cooling systems')),
                ('operator_awareness_dashboard', models.BooleanField(verbose_name='Operator awareness dashboard')),
                ('hpu_optimization', models.BooleanField(verbose_name='HPU optimization')),
                ('optimized_heat_tracing_system', models.BooleanField(verbose_name='Optimized heat tracing system')),
                ('floodlighting_optimization', models.BooleanField(verbose_name='Floodlighting optimization')),
                ('vfds_on_aux_machinery', models.BooleanField(verbose_name="VFD's on AUX machinery")),
                (
                    'cantilevel_reach',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(150),
                        ],
                        verbose_name='Cantilever reach (ft)',
                    ),
                ),
                (
                    'cantilevel_lateral',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(50),
                        ],
                        verbose_name='Cantilever lateral (ft)',
                    ),
                ),
                (
                    'cantilever_capacity',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1000000),
                            django.core.validators.MaxValueValidator(5000000),
                        ]
                    ),
                ),
                (
                    'leg_length',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                        verbose_name='Leg length (ft)',
                    ),
                ),
                (
                    'leg_spacing',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(300),
                        ],
                        verbose_name='Leg spacing (ft)',
                    ),
                ),
                ('subsea_drilling', models.BooleanField(verbose_name='Subsea drilling')),
                ('enhanced_legs', models.BooleanField(verbose_name='Enhanced legs')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='bop_diamater_wp_max',
            field=models.FloatField(
                validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(30)],
                verbose_name='BOP diameter WP Max (in)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='bop_wp_max',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(5000),
                    django.core.validators.MaxValueValidator(25000),
                ],
                verbose_name='BOP WP Max (psi)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='crane_capacity',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(10),
                    django.core.validators.MaxValueValidator(500),
                ],
                verbose_name='Crane capacity',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='derrick_capacity',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(500000),
                    django.core.validators.MaxValueValidator(3000000),
                ],
                verbose_name='Derrick capacity (lbs)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='derrick_height',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(50),
                    django.core.validators.MaxValueValidator(300),
                ],
                verbose_name='Derrick height (ft)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='displacement',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(5000),
                    django.core.validators.MaxValueValidator(300000),
                ],
                verbose_name='Displacement',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='draft',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(50),
                    django.core.validators.MaxValueValidator(150),
                ],
                verbose_name='Draft (ft)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='drawworks_power',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(1000),
                    django.core.validators.MaxValueValidator(10000),
                ],
                verbose_name='Drawworks power (HP)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='engine_power',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(20000),
                ],
                verbose_name='Engine power (HP)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='engine_quantity',
            field=models.PositiveIntegerField(
                validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)],
                verbose_name='Engine quantity',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='engine_total',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(100000),
                ]
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='generator_power',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(20000),
                ],
                verbose_name='Generator power (kW)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='generator_quantity',
            field=models.PositiveIntegerField(
                validators=[django.core.validators.MaxValueValidator(10)], verbose_name='Generator quantity'
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='generator_total',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(100000),
                ],
                verbose_name='Generator total',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='hull_breadth',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(100),
                    django.core.validators.MaxValueValidator(500),
                ],
                verbose_name='Hull breadth (ft)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='hull_concept_score',
            field=models.FloatField(
                validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)],
                verbose_name='Hull concept score',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='hull_depth',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(10),
                    django.core.validators.MaxValueValidator(100),
                ],
                verbose_name='Hull depth (ft)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='hull_design_eco_score',
            field=models.FloatField(
                validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)],
                verbose_name='Hull design eco score',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='hull_length',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(100),
                    django.core.validators.MaxValueValidator(500),
                ],
                verbose_name='Hull length (ft)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='liquid_mud',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(1000),
                    django.core.validators.MaxValueValidator(30000),
                ],
                verbose_name='Liquid mud (bbl)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='mud_total_power',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(1000),
                    django.core.validators.MaxValueValidator(20000),
                ],
                verbose_name='Mud total (HP)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='number_of_bop_stacks',
            field=models.FloatField(
                validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)],
                verbose_name='Number of bop stacks',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='quarters_capacity',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(10),
                    django.core.validators.MaxValueValidator(400),
                ],
                verbose_name='Quarters capacity',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='rig_water_depth',
            field=models.FloatField(
                validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(150)],
                verbose_name='Rig water depth(ft)',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='shaleshaker_total',
            field=models.FloatField(
                validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)],
                verbose_name='Shaleshaker total',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='total_anchors',
            field=models.FloatField(
                validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(16)],
                verbose_name='Total anchors',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='total_bop_rams',
            field=models.FloatField(
                validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)],
                verbose_name='Total BOP rams',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='total_cranes',
            field=models.FloatField(
                validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)],
                verbose_name='Total cranes',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='variable_load',
            field=models.FloatField(
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(20000),
                ],
                verbose_name='Variable load (t)',
            ),
        ),
    ]
