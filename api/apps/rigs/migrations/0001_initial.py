# Generated by Django 4.0.2 on 2022-02-22 11:59

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ConceptSemiRig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, verbose_name="Name")),
                ("manager", models.CharField(max_length=255, verbose_name="Manager")),
                ("design", models.CharField(max_length=255, verbose_name="Design")),
                (
                    "build_yard",
                    models.CharField(max_length=255, verbose_name="Build yard"),
                ),
                (
                    "rig_status",
                    models.CharField(
                        choices=[
                            ("DRILLING", "Drilling"),
                            ("UNDER_CONSTRUCTION", "Under Construction"),
                            ("WARM_STACKED", "Warm Stacked"),
                            ("COLD_STACKED", "Cold Stacked"),
                            ("MOBILIZING", "Mobilizing"),
                        ],
                        max_length=32,
                        verbose_name="Rig status",
                    ),
                ),
                ("delivery_date", models.DateField(verbose_name="Delivery Date")),
                (
                    "special_survey_due",
                    models.DateField(verbose_name="Special survey date"),
                ),
                (
                    "end_of_last_contract",
                    models.DateField(verbose_name="End of last contract"),
                ),
                (
                    "months_in_operation_last_year",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(12)],
                        verbose_name="Months in operation last year",
                    ),
                ),
                (
                    "months_in_operation_last_3_years",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(36)],
                        verbose_name="Months in operation last 3 years",
                    ),
                ),
                (
                    "design_score",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                        ],
                        max_length=16,
                        verbose_name="Design score",
                    ),
                ),
                (
                    "equipment_load",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                        ],
                        max_length=16,
                        verbose_name="Equipment load",
                    ),
                ),
                (
                    "topside_design",
                    models.CharField(
                        choices=[
                            ("NOV", "NOV"),
                            ("MH", "MH"),
                            ("CAMERON", "Cameron"),
                            ("OTHER", "Other"),
                        ],
                        max_length=8,
                        verbose_name="Topside design",
                    ),
                ),
                (
                    "drillfloor_efficiency",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                        ],
                        max_length=16,
                        verbose_name="Drillfloor efficiency",
                    ),
                ),
                (
                    "quarters_capacity",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(400),
                        ],
                        verbose_name="Quarters capacity",
                    ),
                ),
                (
                    "rig_water_depth",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(150)],
                        verbose_name="Rig water depth(ft)",
                    ),
                ),
                (
                    "variable_load",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(20000)],
                        verbose_name="Variable load (t)",
                    ),
                ),
                (
                    "hull_concept_score",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(10)],
                        verbose_name="Hull concept score",
                    ),
                ),
                (
                    "hull_design_eco_score",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(10)],
                        verbose_name="Hull design eco score",
                    ),
                ),
                ("dp", models.BooleanField(verbose_name="DP")),
                (
                    "dp_class",
                    models.CharField(
                        choices=[("DP2", "Dp2"), ("DP3", "Dp3"), ("DP-ER", "Dp Er")],
                        max_length=8,
                        verbose_name="DP Class",
                    ),
                ),
                (
                    "thruster_assist",
                    models.BooleanField(verbose_name="Thruster assist"),
                ),
                (
                    "total_anchors",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(16)],
                        verbose_name="Total anchors",
                    ),
                ),
                (
                    "anchor_standalone",
                    models.BooleanField(verbose_name="Anchor standalone"),
                ),
                (
                    "airgap",
                    models.CharField(
                        choices=[("S", "S"), ("M", "M"), ("L", "L"), ("XL", "Xl")],
                        max_length=16,
                        verbose_name="Airgap",
                    ),
                ),
                (
                    "draft",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(150),
                            django.core.validators.MinValueValidator(50),
                        ],
                        verbose_name="Draft (ft)",
                    ),
                ),
                (
                    "displacement",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(5000),
                            django.core.validators.MaxValueValidator(300000),
                        ],
                        verbose_name="Displacement",
                    ),
                ),
                (
                    "hull_breadth",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name="Hull Breadth (ft)",
                    ),
                ),
                (
                    "hull_depth",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Hull Depth (ft)",
                    ),
                ),
                (
                    "hull_length",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name="Hull Length (ft)",
                    ),
                ),
                (
                    "derrick_height",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(300),
                        ],
                        verbose_name="Derrick Height (ft)",
                    ),
                ),
                (
                    "derrick_capacity",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(500000),
                            django.core.validators.MaxValueValidator(3000000),
                        ],
                        verbose_name="Derrick Capacity (lbs)",
                    ),
                ),
                ("dual_derrick", models.BooleanField(verbose_name="Dual derrick")),
                (
                    "drawworks_power",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                        verbose_name="Drawworks Power (HP)",
                    ),
                ),
                (
                    "active_heave_drawwork",
                    models.BooleanField(verbose_name="Active heave drawwork"),
                ),
                (
                    "cmc_with_active_heave",
                    models.BooleanField(verbose_name="CMC with active heave"),
                ),
                ("ram_system", models.BooleanField(verbose_name="RAM system")),
                (
                    "total_cranes",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Total cranes",
                    ),
                ),
                (
                    "crane_capacity",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name="Crane capacity",
                    ),
                ),
                (
                    "total_bop_rams",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Total BOP rams",
                    ),
                ),
                (
                    "bop_diamater_wp_max",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(30),
                        ],
                        verbose_name="BOP Diameter WP Max (in)",
                    ),
                ),
                (
                    "bop_wp_max",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(5000),
                            django.core.validators.MaxValueValidator(25000),
                        ],
                        verbose_name="BOP WP Max (psi)",
                    ),
                ),
                (
                    "number_of_bop_stacks",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(3),
                        ],
                        verbose_name="Number of bop stacks",
                    ),
                ),
                (
                    "mudpump_quantity",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="Mudpump quantity",
                    ),
                ),
                (
                    "liquid_mud",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(30000),
                        ],
                        verbose_name="Liquid Mud (bbl)",
                    ),
                ),
                (
                    "mud_total_power",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name="Mud total HP",
                    ),
                ),
                (
                    "shaleshaker_total",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(10)],
                        verbose_name="Shaleshaker total",
                    ),
                ),
                (
                    "engine_power",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(20000)],
                        verbose_name="Engine HP",
                    ),
                ),
                (
                    "engine_quantity",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(10)],
                        verbose_name="Engine Quantity",
                    ),
                ),
                (
                    "engine_total",
                    models.PositiveIntegerField(validators=[django.core.validators.MaxValueValidator(100000)]),
                ),
                (
                    "generator_power",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(20000)],
                        verbose_name="Generator Power (KW)",
                    ),
                ),
                (
                    "generator_quantity",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(10)],
                        verbose_name="Generator Quantity",
                    ),
                ),
                (
                    "generator_total",
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(100000)],
                        verbose_name="Generator total",
                    ),
                ),
                ("tripsaver", models.BooleanField(verbose_name="Tripsaver")),
                (
                    "offline_stand_building",
                    models.BooleanField(verbose_name="Offline stand building"),
                ),
                (
                    "auto_pipe_handling",
                    models.BooleanField(verbose_name="Auto pipe handling"),
                ),
                ("dual_activity", models.BooleanField(verbose_name="Dual activity")),
                ("drilltronic", models.BooleanField(verbose_name="Drilltronic")),
                (
                    "dynamic_drilling_guide",
                    models.BooleanField(verbose_name="Dynamic drilling guide"),
                ),
                (
                    "process_automation_platform",
                    models.BooleanField(verbose_name="Process automation platform"),
                ),
                (
                    "automatic_tripping",
                    models.BooleanField(verbose_name="Automatic tripping"),
                ),
                ("closed_bus", models.BooleanField(verbose_name="Closed bus")),
                ("scr", models.BooleanField(verbose_name="SCR")),
                ("hybrid", models.BooleanField(verbose_name="Hybrid")),
                (
                    "hvac_heat_recovery",
                    models.BooleanField(verbose_name="HVAC heat recovery"),
                ),
                (
                    "freshwater_cooling_systems",
                    models.BooleanField(verbose_name="Freshwater cooling systems"),
                ),
                (
                    "seawater_cooling_systems",
                    models.BooleanField(verbose_name="Seawater cooling systems"),
                ),
                (
                    "operator_awareness_dashboard",
                    models.BooleanField(verbose_name="Operator awareness dashboard"),
                ),
                (
                    "hpu_optimization",
                    models.BooleanField(verbose_name="HPU optimization"),
                ),
                (
                    "optimized_heat_tracing_system",
                    models.BooleanField(verbose_name="Optimized heat tracing system"),
                ),
                (
                    "floodlighting_optimization",
                    models.BooleanField(verbose_name="Floodlighting optimization"),
                ),
                (
                    "vfds_on_aux_machinery",
                    models.BooleanField(verbose_name="VFD's on AUX machinery"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
