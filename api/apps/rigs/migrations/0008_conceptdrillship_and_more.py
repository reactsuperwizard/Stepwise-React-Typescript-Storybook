# Generated by Django 4.0.2 on 2022-05-19 13:29

import datetime

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import apps.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('emps', '0004_alter_customempelement_baseline_average_and_more'),
        ('tenants', '0008_auto_20220324_1446'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('rigs', '0007_customjackuprig_emp_customsemirig_emp'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConceptDrillship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('manager', models.CharField(max_length=255, verbose_name='Manager')),
                ('design', models.CharField(max_length=255, verbose_name='Design')),
                ('build_yard', models.CharField(max_length=255, verbose_name='Build yard')),
                (
                    'rig_status',
                    models.CharField(
                        choices=[
                            ('DRILLING', 'Drilling'),
                            ('UNDER_CONSTRUCTION', 'Under Construction'),
                            ('WARM_STACKED', 'Warm Stacked'),
                            ('COLD_STACKED', 'Cold Stacked'),
                            ('MOBILIZING', 'Mobilizing'),
                        ],
                        max_length=32,
                        verbose_name='Rig status',
                    ),
                ),
                (
                    'delivery_date',
                    models.DateField(
                        validators=[
                            apps.core.validators.MinDateValidator(datetime.date(1970, 1, 1)),
                            apps.core.validators.MaxDateValidator(datetime.date(2025, 12, 31)),
                        ],
                        verbose_name='Delivery Date',
                    ),
                ),
                (
                    'special_survey_due',
                    models.DateField(
                        validators=[
                            apps.core.validators.MinDateValidator(datetime.date(2022, 1, 1)),
                            apps.core.validators.MaxDateValidator(datetime.date(2027, 12, 31)),
                        ],
                        verbose_name='Special Survey Due',
                    ),
                ),
                (
                    'end_of_last_contract',
                    models.DateField(
                        validators=[
                            apps.core.validators.MinDateValidator(datetime.date(1970, 1, 1)),
                            apps.core.validators.MaxDateValidator(datetime.date(2035, 12, 31)),
                        ],
                        verbose_name='End of last contract',
                    ),
                ),
                (
                    'months_in_operation_last_year',
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(12)],
                        verbose_name='Months in operation last year',
                    ),
                ),
                (
                    'months_in_operation_last_3_years',
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(36)],
                        verbose_name='Months in operation last 3 years',
                    ),
                ),
                (
                    'design_score',
                    models.CharField(
                        choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')],
                        max_length=16,
                        verbose_name='Design score',
                    ),
                ),
                (
                    'topside_design',
                    models.CharField(
                        choices=[('NOV', 'NOV'), ('MH', 'MH'), ('CAMERON', 'Cameron'), ('OTHER', 'Other')],
                        max_length=8,
                        verbose_name='Topside design',
                    ),
                ),
                (
                    'quarters_capacity',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(400),
                        ],
                        verbose_name='Quarters capacity',
                    ),
                ),
                (
                    'hull_breadth',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name='Hull breadth (ft)',
                    ),
                ),
                (
                    'hull_depth',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name='Hull depth (ft)',
                    ),
                ),
                (
                    'hull_length',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name='Hull length (ft)',
                    ),
                ),
                (
                    'derrick_height',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(300),
                        ],
                        verbose_name='Derrick height (ft)',
                    ),
                ),
                (
                    'derrick_capacity',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(500000),
                            django.core.validators.MaxValueValidator(3000000),
                        ],
                        verbose_name='Derrick capacity (lbs)',
                    ),
                ),
                (
                    'drawworks_power',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                        verbose_name='Drawworks power (HP)',
                    ),
                ),
                (
                    'total_cranes',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Total cranes',
                    ),
                ),
                (
                    'crane_capacity',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name='Crane capacity',
                    ),
                ),
                (
                    'total_bop_rams',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Total BOP rams',
                    ),
                ),
                (
                    'bop_diamater_wp_max',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(30),
                        ],
                        verbose_name='BOP diameter WP Max (in)',
                    ),
                ),
                (
                    'bop_wp_max',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(5000),
                            django.core.validators.MaxValueValidator(25000),
                        ],
                        verbose_name='BOP WP Max (psi)',
                    ),
                ),
                (
                    'number_of_bop_stacks',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(3),
                        ],
                        verbose_name='Number of bop stacks',
                    ),
                ),
                (
                    'mudpump_quantity',
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Mudpump quantity',
                    ),
                ),
                (
                    'liquid_mud',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(30000),
                        ],
                        verbose_name='Liquid mud (bbl)',
                    ),
                ),
                (
                    'mud_total_power',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Mud total (HP)',
                    ),
                ),
                (
                    'shaleshaker_total',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Shaleshaker total',
                    ),
                ),
                (
                    'engine_power',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Engine power (HP)',
                    ),
                ),
                (
                    'engine_quantity',
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Engine quantity',
                    ),
                ),
                (
                    'engine_total',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100000),
                        ]
                    ),
                ),
                (
                    'generator_power',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Generator power (kW)',
                    ),
                ),
                (
                    'generator_quantity',
                    models.PositiveIntegerField(
                        validators=[django.core.validators.MaxValueValidator(10)], verbose_name='Generator quantity'
                    ),
                ),
                (
                    'generator_total',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100000),
                        ],
                        verbose_name='Generator total',
                    ),
                ),
                ('offline_stand_building', models.BooleanField(verbose_name='Offline stand building')),
                ('auto_pipe_handling', models.BooleanField(verbose_name='Auto pipe handling')),
                ('dual_activity', models.BooleanField(verbose_name='Dual activity')),
                ('drilltronic', models.BooleanField(verbose_name='Drilltronic')),
                ('dynamic_drilling_guide', models.BooleanField(verbose_name='Dynamic drilling guide')),
                ('process_automation_platform', models.BooleanField(verbose_name='Process automation platform')),
                ('automatic_tripping', models.BooleanField(verbose_name='Automatic tripping')),
                ('closed_bus', models.BooleanField(verbose_name='Closed bus')),
                ('scr', models.BooleanField(verbose_name='SCR')),
                ('hybrid', models.BooleanField(verbose_name='Hybrid')),
                ('hvac_heat_recovery', models.BooleanField(verbose_name='HVAC heat recovery')),
                ('freshwater_cooling_systems', models.BooleanField(verbose_name='Freshwater cooling systems')),
                ('seawater_cooling_systems', models.BooleanField(verbose_name='Seawater cooling systems')),
                ('operator_awareness_dashboard', models.BooleanField(verbose_name='Operator awareness dashboard')),
                ('hpu_optimization', models.BooleanField(verbose_name='HPU optimization')),
                ('optimized_heat_tracing_system', models.BooleanField(verbose_name='Optimized heat tracing system')),
                ('floodlighting_optimization', models.BooleanField(verbose_name='Floodlighting optimization')),
                ('vfds_on_aux_machinery', models.BooleanField(verbose_name="VFD's on AUX machinery")),
                (
                    'equipment_load',
                    models.CharField(
                        choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')],
                        max_length=16,
                        verbose_name='Equipment load',
                    ),
                ),
                (
                    'drillfloor_efficiency',
                    models.CharField(
                        choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')],
                        max_length=16,
                        verbose_name='Drillfloor efficiency',
                    ),
                ),
                (
                    'rig_water_depth',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Rig water depth(ft)',
                    ),
                ),
                (
                    'variable_load',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(50000),
                        ],
                        verbose_name='Variable load (t)',
                    ),
                ),
                (
                    'hull_concept_score',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Hull concept score',
                    ),
                ),
                (
                    'hull_design_eco_score',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Hull design eco score',
                    ),
                ),
                ('dp', models.BooleanField(verbose_name='DP')),
                (
                    'dp_class',
                    models.CharField(
                        choices=[('DP2', 'Dp2'), ('DP3', 'Dp3'), ('DP-ER', 'Dp Er')],
                        max_length=8,
                        verbose_name='DP Class',
                    ),
                ),
                (
                    'draft_depth',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(150),
                        ],
                        verbose_name='Draft (ft)',
                    ),
                ),
                (
                    'displacement',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(5000),
                            django.core.validators.MaxValueValidator(300000),
                        ],
                        verbose_name='Displacement',
                    ),
                ),
                (
                    'riser_on_board_outfitted',
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Riser on board outfitted',
                    ),
                ),
                ('riser_storage_inside_hull', models.BooleanField(verbose_name='Riser storage inside hull')),
                ('split_funnels_free_stern_deck', models.BooleanField(verbose_name='Split funnels / free stern deck')),
                ('dual_derrick', models.BooleanField(verbose_name='Dual derrick')),
                ('active_heave_drawwork', models.BooleanField(verbose_name='Active heave drawwork')),
                ('cmc_with_active_heave', models.BooleanField(verbose_name='CMC with active heave')),
                ('ram_system', models.BooleanField(verbose_name='RAM system')),
                ('tripsaver', models.BooleanField(verbose_name='Tripsaver')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='conceptjackuprig',
            name='delivery_date',
            field=models.DateField(
                validators=[
                    apps.core.validators.MinDateValidator(datetime.date(1970, 1, 1)),
                    apps.core.validators.MaxDateValidator(datetime.date(2025, 12, 31)),
                ],
                verbose_name='Delivery Date',
            ),
        ),
        migrations.AlterField(
            model_name='conceptjackuprig',
            name='end_of_last_contract',
            field=models.DateField(
                validators=[
                    apps.core.validators.MinDateValidator(datetime.date(1970, 1, 1)),
                    apps.core.validators.MaxDateValidator(datetime.date(2035, 12, 31)),
                ],
                verbose_name='End of last contract',
            ),
        ),
        migrations.AlterField(
            model_name='conceptjackuprig',
            name='special_survey_due',
            field=models.DateField(
                validators=[
                    apps.core.validators.MinDateValidator(datetime.date(2022, 1, 1)),
                    apps.core.validators.MaxDateValidator(datetime.date(2027, 12, 31)),
                ],
                verbose_name='Special Survey Due',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='delivery_date',
            field=models.DateField(
                validators=[
                    apps.core.validators.MinDateValidator(datetime.date(1970, 1, 1)),
                    apps.core.validators.MaxDateValidator(datetime.date(2025, 12, 31)),
                ],
                verbose_name='Delivery Date',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='end_of_last_contract',
            field=models.DateField(
                validators=[
                    apps.core.validators.MinDateValidator(datetime.date(1970, 1, 1)),
                    apps.core.validators.MaxDateValidator(datetime.date(2035, 12, 31)),
                ],
                verbose_name='End of last contract',
            ),
        ),
        migrations.AlterField(
            model_name='conceptsemirig',
            name='special_survey_due',
            field=models.DateField(
                validators=[
                    apps.core.validators.MinDateValidator(datetime.date(2022, 1, 1)),
                    apps.core.validators.MaxDateValidator(datetime.date(2027, 12, 31)),
                ],
                verbose_name='Special Survey Due',
            ),
        ),
        migrations.AlterField(
            model_name='customjackuprig',
            name='delivery_date',
            field=models.DateField(
                blank=True,
                null=True,
                validators=[
                    apps.core.validators.MinDateValidator(datetime.date(1970, 1, 1)),
                    apps.core.validators.MaxDateValidator(datetime.date(2025, 12, 31)),
                ],
                verbose_name='Delivery Date',
            ),
        ),
        migrations.AlterField(
            model_name='customjackuprig',
            name='emp',
            field=models.OneToOneField(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='emps.emp'
            ),
        ),
        migrations.AlterField(
            model_name='customjackuprig',
            name='end_of_last_contract',
            field=models.DateField(
                blank=True,
                null=True,
                validators=[
                    apps.core.validators.MinDateValidator(datetime.date(1970, 1, 1)),
                    apps.core.validators.MaxDateValidator(datetime.date(2035, 12, 31)),
                ],
                verbose_name='End of last contract',
            ),
        ),
        migrations.AlterField(
            model_name='customjackuprig',
            name='special_survey_due',
            field=models.DateField(
                blank=True,
                null=True,
                validators=[
                    apps.core.validators.MinDateValidator(datetime.date(2022, 1, 1)),
                    apps.core.validators.MaxDateValidator(datetime.date(2027, 12, 31)),
                ],
                verbose_name='Special Survey Due',
            ),
        ),
        migrations.AlterField(
            model_name='customsemirig',
            name='delivery_date',
            field=models.DateField(
                blank=True,
                null=True,
                validators=[
                    apps.core.validators.MinDateValidator(datetime.date(1970, 1, 1)),
                    apps.core.validators.MaxDateValidator(datetime.date(2025, 12, 31)),
                ],
                verbose_name='Delivery Date',
            ),
        ),
        migrations.AlterField(
            model_name='customsemirig',
            name='emp',
            field=models.OneToOneField(
                blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='emps.emp'
            ),
        ),
        migrations.AlterField(
            model_name='customsemirig',
            name='end_of_last_contract',
            field=models.DateField(
                blank=True,
                null=True,
                validators=[
                    apps.core.validators.MinDateValidator(datetime.date(1970, 1, 1)),
                    apps.core.validators.MaxDateValidator(datetime.date(2035, 12, 31)),
                ],
                verbose_name='End of last contract',
            ),
        ),
        migrations.AlterField(
            model_name='customsemirig',
            name='special_survey_due',
            field=models.DateField(
                blank=True,
                null=True,
                validators=[
                    apps.core.validators.MinDateValidator(datetime.date(2022, 1, 1)),
                    apps.core.validators.MaxDateValidator(datetime.date(2027, 12, 31)),
                ],
                verbose_name='Special Survey Due',
            ),
        ),
        migrations.CreateModel(
            name='CustomDrillship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name')),
                ('manager', models.CharField(blank=True, max_length=255, verbose_name='Manager')),
                ('design', models.CharField(blank=True, max_length=255, verbose_name='Design')),
                ('build_yard', models.CharField(blank=True, max_length=255, verbose_name='Build yard')),
                (
                    'rig_status',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('DRILLING', 'Drilling'),
                            ('UNDER_CONSTRUCTION', 'Under Construction'),
                            ('WARM_STACKED', 'Warm Stacked'),
                            ('COLD_STACKED', 'Cold Stacked'),
                            ('MOBILIZING', 'Mobilizing'),
                        ],
                        max_length=32,
                        verbose_name='Rig status',
                    ),
                ),
                (
                    'delivery_date',
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            apps.core.validators.MinDateValidator(datetime.date(1970, 1, 1)),
                            apps.core.validators.MaxDateValidator(datetime.date(2025, 12, 31)),
                        ],
                        verbose_name='Delivery Date',
                    ),
                ),
                (
                    'special_survey_due',
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            apps.core.validators.MinDateValidator(datetime.date(2022, 1, 1)),
                            apps.core.validators.MaxDateValidator(datetime.date(2027, 12, 31)),
                        ],
                        verbose_name='Special Survey Due',
                    ),
                ),
                (
                    'end_of_last_contract',
                    models.DateField(
                        blank=True,
                        null=True,
                        validators=[
                            apps.core.validators.MinDateValidator(datetime.date(1970, 1, 1)),
                            apps.core.validators.MaxDateValidator(datetime.date(2035, 12, 31)),
                        ],
                        verbose_name='End of last contract',
                    ),
                ),
                (
                    'months_in_operation_last_year',
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(12)],
                        verbose_name='Months in operation last year',
                    ),
                ),
                (
                    'months_in_operation_last_3_years',
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(36)],
                        verbose_name='Months in operation last 3 years',
                    ),
                ),
                (
                    'design_score',
                    models.CharField(
                        blank=True,
                        choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')],
                        max_length=16,
                        verbose_name='Design score',
                    ),
                ),
                (
                    'topside_design',
                    models.CharField(
                        blank=True,
                        choices=[('NOV', 'NOV'), ('MH', 'MH'), ('CAMERON', 'Cameron'), ('OTHER', 'Other')],
                        max_length=8,
                        verbose_name='Topside design',
                    ),
                ),
                (
                    'quarters_capacity',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(400),
                        ],
                        verbose_name='Quarters capacity',
                    ),
                ),
                (
                    'hull_breadth',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name='Hull breadth (ft)',
                    ),
                ),
                (
                    'hull_depth',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name='Hull depth (ft)',
                    ),
                ),
                (
                    'hull_length',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(100),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name='Hull length (ft)',
                    ),
                ),
                (
                    'derrick_height',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(300),
                        ],
                        verbose_name='Derrick height (ft)',
                    ),
                ),
                (
                    'derrick_capacity',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(500000),
                            django.core.validators.MaxValueValidator(3000000),
                        ],
                        verbose_name='Derrick capacity (lbs)',
                    ),
                ),
                (
                    'drawworks_power',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                        verbose_name='Drawworks power (HP)',
                    ),
                ),
                (
                    'total_cranes',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Total cranes',
                    ),
                ),
                (
                    'crane_capacity',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(500),
                        ],
                        verbose_name='Crane capacity',
                    ),
                ),
                (
                    'total_bop_rams',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Total BOP rams',
                    ),
                ),
                (
                    'bop_diamater_wp_max',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(10),
                            django.core.validators.MaxValueValidator(30),
                        ],
                        verbose_name='BOP diameter WP Max (in)',
                    ),
                ),
                (
                    'bop_wp_max',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(5000),
                            django.core.validators.MaxValueValidator(25000),
                        ],
                        verbose_name='BOP WP Max (psi)',
                    ),
                ),
                (
                    'number_of_bop_stacks',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(3),
                        ],
                        verbose_name='Number of bop stacks',
                    ),
                ),
                (
                    'mudpump_quantity',
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Mudpump quantity',
                    ),
                ),
                (
                    'liquid_mud',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(30000),
                        ],
                        verbose_name='Liquid mud (bbl)',
                    ),
                ),
                (
                    'mud_total_power',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1000),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Mud total (HP)',
                    ),
                ),
                (
                    'shaleshaker_total',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Shaleshaker total',
                    ),
                ),
                (
                    'engine_power',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Engine power (HP)',
                    ),
                ),
                (
                    'engine_quantity',
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Engine quantity',
                    ),
                ),
                (
                    'engine_total',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100000),
                        ],
                    ),
                ),
                (
                    'generator_power',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Generator power (kW)',
                    ),
                ),
                (
                    'generator_quantity',
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(10)],
                        verbose_name='Generator quantity',
                    ),
                ),
                (
                    'generator_total',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100000),
                        ],
                        verbose_name='Generator total',
                    ),
                ),
                (
                    'offline_stand_building',
                    models.BooleanField(blank=True, null=True, verbose_name='Offline stand building'),
                ),
                ('auto_pipe_handling', models.BooleanField(blank=True, null=True, verbose_name='Auto pipe handling')),
                ('dual_activity', models.BooleanField(blank=True, null=True, verbose_name='Dual activity')),
                ('drilltronic', models.BooleanField(blank=True, null=True, verbose_name='Drilltronic')),
                (
                    'dynamic_drilling_guide',
                    models.BooleanField(blank=True, null=True, verbose_name='Dynamic drilling guide'),
                ),
                (
                    'process_automation_platform',
                    models.BooleanField(blank=True, null=True, verbose_name='Process automation platform'),
                ),
                ('automatic_tripping', models.BooleanField(blank=True, null=True, verbose_name='Automatic tripping')),
                ('closed_bus', models.BooleanField(blank=True, null=True, verbose_name='Closed bus')),
                ('scr', models.BooleanField(blank=True, null=True, verbose_name='SCR')),
                ('hybrid', models.BooleanField(blank=True, null=True, verbose_name='Hybrid')),
                ('hvac_heat_recovery', models.BooleanField(blank=True, null=True, verbose_name='HVAC heat recovery')),
                (
                    'freshwater_cooling_systems',
                    models.BooleanField(blank=True, null=True, verbose_name='Freshwater cooling systems'),
                ),
                (
                    'seawater_cooling_systems',
                    models.BooleanField(blank=True, null=True, verbose_name='Seawater cooling systems'),
                ),
                (
                    'operator_awareness_dashboard',
                    models.BooleanField(blank=True, null=True, verbose_name='Operator awareness dashboard'),
                ),
                ('hpu_optimization', models.BooleanField(blank=True, null=True, verbose_name='HPU optimization')),
                (
                    'optimized_heat_tracing_system',
                    models.BooleanField(blank=True, null=True, verbose_name='Optimized heat tracing system'),
                ),
                (
                    'floodlighting_optimization',
                    models.BooleanField(blank=True, null=True, verbose_name='Floodlighting optimization'),
                ),
                (
                    'vfds_on_aux_machinery',
                    models.BooleanField(blank=True, null=True, verbose_name="VFD's on AUX machinery"),
                ),
                (
                    'equipment_load',
                    models.CharField(
                        blank=True,
                        choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')],
                        max_length=16,
                        verbose_name='Equipment load',
                    ),
                ),
                (
                    'drillfloor_efficiency',
                    models.CharField(
                        blank=True,
                        choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')],
                        max_length=16,
                        verbose_name='Drillfloor efficiency',
                    ),
                ),
                (
                    'rig_water_depth',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Rig water depth(ft)',
                    ),
                ),
                (
                    'variable_load',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(50000),
                        ],
                        verbose_name='Variable load (t)',
                    ),
                ),
                (
                    'hull_concept_score',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Hull concept score',
                    ),
                ),
                (
                    'hull_design_eco_score',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name='Hull design eco score',
                    ),
                ),
                ('dp', models.BooleanField(blank=True, null=True, verbose_name='DP')),
                (
                    'dp_class',
                    models.CharField(
                        blank=True,
                        choices=[('DP2', 'Dp2'), ('DP3', 'Dp3'), ('DP-ER', 'Dp Er')],
                        max_length=8,
                        verbose_name='DP Class',
                    ),
                ),
                (
                    'draft_depth',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(50),
                            django.core.validators.MaxValueValidator(150),
                        ],
                        verbose_name='Draft (ft)',
                    ),
                ),
                (
                    'displacement',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(5000),
                            django.core.validators.MaxValueValidator(300000),
                        ],
                        verbose_name='Displacement',
                    ),
                ),
                (
                    'riser_on_board_outfitted',
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20000),
                        ],
                        verbose_name='Riser on board outfitted',
                    ),
                ),
                (
                    'riser_storage_inside_hull',
                    models.BooleanField(blank=True, null=True, verbose_name='Riser storage inside hull'),
                ),
                (
                    'split_funnels_free_stern_deck',
                    models.BooleanField(blank=True, null=True, verbose_name='Split funnels / free stern deck'),
                ),
                ('dual_derrick', models.BooleanField(blank=True, null=True, verbose_name='Dual derrick')),
                (
                    'active_heave_drawwork',
                    models.BooleanField(blank=True, null=True, verbose_name='Active heave drawwork'),
                ),
                (
                    'cmc_with_active_heave',
                    models.BooleanField(blank=True, null=True, verbose_name='CMC with active heave'),
                ),
                ('ram_system', models.BooleanField(blank=True, null=True, verbose_name='RAM system')),
                ('tripsaver', models.BooleanField(blank=True, null=True, verbose_name='Tripsaver')),
                ('draft', models.BooleanField()),
                (
                    'creator',
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
                ),
                (
                    'emp',
                    models.OneToOneField(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='emps.emp'
                    ),
                ),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tenants.tenant')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
