# Generated by Django 4.0.2 on 2022-11-10 09:19

from enum import Enum

from django.db import migrations
from django.db.models import Q

HALF_TRANSIT_QUERY = (
    Q(phase__phase__transit=False, mode__mode__transit=True)
    | Q(phase__phase__transit=True, mode__mode__transit=False)
    | Q(phase__phase__isnull=True, mode__mode__transit=True)
    | Q(phase__phase__transit=True, mode__mode__isnull=True)
)


class AssetTypeEnum(str, Enum):
    JACKUP = 'JACKUP'
    SEMI = 'SEMI'
    DRILLSHIP = 'DRILLSHIP'
    FIXED_PLATFORM = 'FIXED_PLATFORM'


ASSET_TYPES = [item.value for item in AssetTypeEnum]


class AssetSeasonEnum(str, Enum):
    SUMMER = "SUMMER"
    WINTER = "WINTER"


def migrate_custom_phases_and_modes(
    *, tenant, transit_phase, transit_mode, AssetModel, CustomPhaseModel, CustomModeModel
):
    for asset in AssetModel.objects.filter(tenant=tenant):
        CustomPhaseModel.objects.update_or_create(
            asset=asset,
            phase=transit_phase,
            defaults={
                "name": transit_phase.name,
                "description": transit_phase.description,
            },
        )
        CustomModeModel.objects.update_or_create(
            asset=asset,
            mode=transit_mode,
            defaults={
                "name": transit_mode.name,
                "description": transit_mode.description,
            },
        )


def migrate_baseline_inputs(*, tenant, transit_phase, transit_mode, BaselineModel, BaselineInputModel):
    for season in AssetSeasonEnum:
        for baseline in BaselineModel.objects.filter(tenant=tenant):
            BaselineInputModel.objects.get_or_create(
                baseline=baseline,
                phase=transit_phase,
                mode=transit_mode,
                season=season.value,
                defaults={
                    'value': 0,
                    'order': BaselineInputModel.objects.filter(baseline=baseline).count(),
                },
            )


def migrate_emission_reduction_initiatives(
    *, tenant, transit_phase, transit_mode, EmissionReductionInitiativeModel, EmissionReductionInitiativeInputModel
):
    for emission_reduction_initiative in EmissionReductionInitiativeModel.objects.filter(
        emission_management_plan__asset__tenant=tenant
    ):
        EmissionReductionInitiativeInputModel.objects.get_or_create(
            emission_reduction_initiative=emission_reduction_initiative,
            phase=transit_phase,
            mode=transit_mode,
            defaults={
                'value': 0,
                'order': EmissionReductionInitiativeInputModel.objects.filter(
                    emission_reduction_initiative=emission_reduction_initiative
                ).count(),
            },
        )


def remove_half_transit_inputs(
    *,
    BaselineInputModel,
    EmissionReductionInitiativeInputModel,
):
    BaselineInputModel.objects.filter(HALF_TRANSIT_QUERY).delete()
    EmissionReductionInitiativeInputModel.objects.filter(HALF_TRANSIT_QUERY).delete()


def migrate_well_planner_steps(*, WellPlannerStepModel):
    for well_planner_step in WellPlannerStepModel.objects.filter(HALF_TRANSIT_QUERY):
        transit_phase = well_planner_step.well_planner.asset.customphase_set.get(phase__transit=True)
        transit_mode = well_planner_step.well_planner.asset.custommode_set.get(mode__transit=True)

        well_planner_step.phase = transit_phase
        well_planner_step.mode = transit_mode
        well_planner_step.save()


def migrate(apps, _):
    TenantModel = apps.get_model('tenants', 'Tenant')
    AssetModel = apps.get_model('emissions', 'Asset')

    ConceptModeModel = apps.get_model('emissions', 'ConceptMode')
    ConceptPhaseModel = apps.get_model('emissions', 'ConceptPhase')

    BaselineModel = apps.get_model('emissions', 'Baseline')
    BaselineInputModel = apps.get_model('emissions', 'BaselineInput')

    EmissionReductionInitiativeModel = apps.get_model('emissions', 'EmissionReductionInitiative')
    EmissionReductionInitiativeInputModel = apps.get_model('emissions', 'EmissionReductionInitiativeInput')

    CustomPhaseModel = apps.get_model('emissions', 'CustomPhase')
    CustomModeModel = apps.get_model('emissions', 'CustomMode')

    WellPlannerPlannedStepModel = apps.get_model('wells', 'WellPlannerPlannedStep')
    WellPlannerCompleteStepModel = apps.get_model('wells', 'WellPlannerCompleteStep')

    for tenant in TenantModel.objects.all():
        transit_phase, transit_phase_created = ConceptPhaseModel.objects.update_or_create(
            tenant=tenant,
            name='Transit',
            defaults={
                'transit': True,
                'description': 'Transit phase',
            },
        )
        transit_mode, transit_mode_created = ConceptModeModel.objects.update_or_create(
            tenant=tenant,
            name='Transit',
            defaults={
                'transit': True,
                'description': 'Transit phase',
                'asset_types': ASSET_TYPES,
            },
        )

        if any([transit_mode_created, transit_phase_created]):
            migrate_custom_phases_and_modes(
                tenant=tenant,
                transit_phase=transit_phase,
                transit_mode=transit_mode,
                AssetModel=AssetModel,
                CustomPhaseModel=CustomPhaseModel,
                CustomModeModel=CustomModeModel,
            )
            migrate_baseline_inputs(
                tenant=tenant,
                transit_phase=transit_phase,
                transit_mode=transit_mode,
                BaselineModel=BaselineModel,
                BaselineInputModel=BaselineInputModel,
            )
            migrate_emission_reduction_initiatives(
                tenant=tenant,
                transit_phase=transit_phase,
                transit_mode=transit_mode,
                EmissionReductionInitiativeModel=EmissionReductionInitiativeModel,
                EmissionReductionInitiativeInputModel=EmissionReductionInitiativeInputModel,
            )

    remove_half_transit_inputs(
        BaselineInputModel=BaselineInputModel,
        EmissionReductionInitiativeInputModel=EmissionReductionInitiativeInputModel,
    )
    migrate_well_planner_steps(WellPlannerStepModel=WellPlannerPlannedStepModel)
    migrate_well_planner_steps(WellPlannerStepModel=WellPlannerCompleteStepModel)


class Migration(migrations.Migration):

    dependencies = [
        ('emissions', '0043_alter_conceptmode_unique_together_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate, migrations.RunPython.noop),
    ]
