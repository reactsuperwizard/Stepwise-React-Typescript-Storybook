# Generated by Django 4.0.2 on 2022-09-12 10:26

from django.db import migrations

well_planner_phase_name_map = {
    'TRANSIT': 'Transit / Stand by',
    'POSITIONING': 'Positioning',
    'TOP_HOLE_SECTION': 'Top hole section',
    'TRANSPORT_SECTION': 'Transport section',
    'RESERVOIR_SECTION': 'Reservoir section',
    'COMPLETION': 'Completion',
    'WELL_INTERVENTION': 'Well intervention',
    'PLUG_AND_ABANDON': 'Plug and abandon',
    'WAITING_ON_WEATHER': 'Waiting on weather',
    'DOWNTIME': 'Downtime',
    'MOBILIZING': 'Mobilizing',
    'WARM_STACKED': 'Warm stacked',
    'COLD_STACKED': 'Cold stacked',
}

well_planner_phase_color_map = {
    "TRANSIT": '#E2E0DC',
    "POSITIONING": '#88D3A6',
    "TOP_HOLE_SECTION": '#273D57',
    "TRANSPORT_SECTION": '#88D3A6',
    "RESERVOIR_SECTION": '#9FA9B5',
    "COMPLETION": '#707E8F',
    "WELL_INTERVENTION": '#E2E0DC',
    "PLUG_AND_ABANDON": '#FF7A7F',
    "WAITING_ON_WEATHER": '#E8B618',
    "DOWNTIME": '#E2E0DC',
    "MOBILIZING": '#E2E0DC',
    "WARM_STACKED": '#E2E0DC',
    "COLD_STACKED": '#E2E0DC',
}

well_planner_mode_name_map = {
    'TRANSIT': 'Transit / Stand by',
    'POS_MOORE': 'Pos moore',
    'DP': 'Dynamic positioning',
    'ANCHOR': 'Anchor',
}

well_planner_mode_attribute_map = {
    'POS_MOORE': 'pos_moore',
    'DP': 'dp',
    'ANCHOR': 'anchor',
}


def migrate_phases(rig_planner):
    for key in well_planner_phase_name_map.keys():
        rig_planner.wellplannerphase_set.create(
            name=well_planner_phase_name_map[key],
            color=well_planner_phase_color_map[key],
            rig_planner=rig_planner,
        )


def migrate_modes(rig_planner):
    for key in well_planner_mode_name_map.keys():
        rig_planner.wellplannermode_set.create(
            name=well_planner_mode_name_map[key],
            rig_planner=rig_planner,
        )


def migrate_custom_energy_use(rig_planner, CustomEnergyUseModel):
    try:
        custom_energy_use = rig_planner.customenergyuse
    except CustomEnergyUseModel.DoesNotExist:
        return

    for custom_energy_use_phase in custom_energy_use.customenergyusephase_set.all():
        phase_model = rig_planner.wellplannerphase_set.get(
            name=well_planner_phase_name_map[custom_energy_use_phase.phase]
        )
        custom_energy_use_phase.phase_model = phase_model
        custom_energy_use_phase.mode_model = rig_planner.wellplannermode_set.get(
            name=well_planner_mode_name_map['TRANSIT']
        )
        custom_energy_use_phase.value = custom_energy_use_phase.default
        custom_energy_use_phase.save()

        for mode_key, mode_attribute in well_planner_mode_attribute_map.items():
            custom_energy_use.customenergyusephase_set.create(
                season=custom_energy_use_phase.season,
                phase=custom_energy_use_phase.phase,
                phase_model=phase_model,
                mode_model=rig_planner.wellplannermode_set.get(name=well_planner_mode_name_map[mode_key]),
                default=0,
                pos_moore=0,
                dp=0,
                anchor=0,
                value=getattr(custom_energy_use_phase, mode_attribute),
            )


def migrate_emp_initiatives(rig_planner):
    for emp_initiative in rig_planner.customempinitiative_set.all():
        for emp_initiative_phase in emp_initiative.customempinitiativephase_set.all():
            phase_model = emp_initiative_phase.phase_model = rig_planner.wellplannerphase_set.get(
                name=well_planner_phase_name_map[emp_initiative_phase.phase]
            )
            emp_initiative_phase.phase_model = phase_model
            emp_initiative_phase.mode_model = rig_planner.wellplannermode_set.get(
                name=well_planner_mode_name_map['TRANSIT']
            )
            emp_initiative_phase.value = emp_initiative_phase.default
            emp_initiative_phase.save()

            for mode_key, mode_attribute in well_planner_mode_attribute_map.items():
                emp_initiative.customempinitiativephase_set.create(
                    phase=emp_initiative_phase.phase,
                    phase_model=phase_model,
                    mode_model=rig_planner.wellplannermode_set.get(name=well_planner_mode_name_map[mode_key]),
                    default=0,
                    pos_moore=0,
                    dp=0,
                    anchor=0,
                    value=getattr(emp_initiative_phase, mode_attribute),
                )


def migrate_well_planner_planned_steps(rig_planner):
    for well_planner in rig_planner.wellplanner_set.all():
        for well_planner_planned_step in well_planner.planned_steps.all():
            well_planner_planned_step.phase_model = rig_planner.wellplannerphase_set.get(
                name=well_planner_phase_name_map[well_planner_planned_step.phase]
            )
            well_planner_planned_step.mode_model = rig_planner.wellplannermode_set.get(
                name=well_planner_mode_name_map[well_planner_planned_step.mode]
            )
            well_planner_planned_step.save()


def migrate_well_planner_complete_steps(rig_planner):
    for well_planner in rig_planner.wellplanner_set.all():
        for well_planner_complete_step in well_planner.complete_steps.all():
            well_planner_complete_step.phase_model = rig_planner.wellplannerphase_set.get(
                name=well_planner_phase_name_map[well_planner_complete_step.phase]
            )
            well_planner_complete_step.mode_model = rig_planner.wellplannermode_set.get(
                name=well_planner_mode_name_map[well_planner_complete_step.mode]
            )
            well_planner_complete_step.save()


def migrate_well_planner_phases_and_modes(apps, _):
    RigPlannerModel = apps.get_model('projects.RigPlanner')
    CustomEnergyUseModel = apps.get_model('emps', 'CustomEnergyUse')

    for rig_planner in RigPlannerModel.objects.all():
        migrate_phases(rig_planner)
        migrate_modes(rig_planner)
        migrate_custom_energy_use(rig_planner, CustomEnergyUseModel)
        migrate_emp_initiatives(rig_planner)
        migrate_well_planner_planned_steps(rig_planner)
        migrate_well_planner_complete_steps(rig_planner)


class Migration(migrations.Migration):

    dependencies = [
        ('wells', '0024_wellplannerphase_wellplannermode_and_more'),
        ('emps', '0009_alter_customempinitiativephase_unique_together_and_more'),
        ('projects', '0030_rigplanner_draft'),
    ]

    operations = [
        migrations.RunPython(migrate_well_planner_phases_and_modes, migrations.RunPython.noop),
    ]
