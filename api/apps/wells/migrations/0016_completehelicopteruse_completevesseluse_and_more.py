# Generated by Django 4.0.2 on 2022-08-10 13:05

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('emps', '0006_customoperationefficiency_rig_planner_and_more'),
        ('projects', '0027_conceptcarboncapturestoragesystem_conceptcement_and_more'),
        ('wells', '0015_wellplannerstep_improved_duration'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompleteHelicopterUse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                (
                    'fuel',
                    models.FloatField(
                        help_text='Fuel consumption per hour in liters',
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ('trips', models.PositiveIntegerField(help_text='Number of roundtrip flights')),
                (
                    'trip_duration',
                    models.FloatField(
                        help_text='Duration of a roundtrip flight',
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ('approved', models.BooleanField()),
                (
                    'helicopter',
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.customhelicopter'),
                ),
                (
                    'well_planner',
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wells.wellplanner'),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompleteVesselUse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                (
                    'days',
                    models.FloatField(
                        help_text='Days of operation',
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ('approved', models.BooleanField()),
                ('vessel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.customvessel')),
                (
                    'well_planner',
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wells.wellplanner'),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlannedHelicopterUse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                (
                    'fuel',
                    models.FloatField(
                        help_text='Fuel consumption per hour in liters',
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ('trips', models.PositiveIntegerField(help_text='Number of roundtrip flights')),
                (
                    'trip_duration',
                    models.FloatField(
                        help_text='Duration of a roundtrip flight',
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    'helicopter',
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.customhelicopter'),
                ),
                (
                    'well_planner',
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wells.wellplanner'),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlannedVesselUse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                (
                    'days',
                    models.FloatField(
                        help_text='Days of operation',
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ('vessel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='projects.customvessel')),
                (
                    'well_planner',
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wells.wellplanner'),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WellPlannerCompleteStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                (
                    'duration',
                    models.FloatField(
                        help_text='Phase duration in days', validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    'phase',
                    models.CharField(
                        choices=[
                            ('TRANSIT', 'Transit / Stand by'),
                            ('POSITIONING', 'Positioning'),
                            ('TOP_HOLE_SECTION', 'Top hole section'),
                            ('TRANSPORT_SECTION', 'Transport section'),
                            ('RESERVOIR_SECTION', 'Reservoir section'),
                            ('COMPLETION', 'Completion'),
                            ('WELL_INTERVENTION', 'Well intervention'),
                            ('PLUG_AND_ABANDON', 'Plug and abandon'),
                            ('WAITING_ON_WEATHER', 'Waiting on weather'),
                            ('DOWNTIME', 'Downtime'),
                            ('MOBILIZING', 'Mobilizing'),
                            ('WARM_STACKED', 'Warm stacked'),
                            ('COLD_STACKED', 'Cold stacked'),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    'mode',
                    models.CharField(
                        choices=[
                            ('TRANSIT', 'Transit / Stand by'),
                            ('POS_MOORE', 'Pos moore'),
                            ('DP', 'Dynamic positioning'),
                            ('ANCHOR', 'Anchor'),
                        ],
                        max_length=16,
                    ),
                ),
                ('season', models.CharField(choices=[('SUMMER', 'Summer'), ('WINTER', 'Winter')], max_length=16)),
                (
                    'cement_volume',
                    models.FloatField(
                        blank=True,
                        help_text='Volume of cement in cubic meters',
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    'steel_weight',
                    models.FloatField(
                        blank=True,
                        help_text='Weight of steel in mT',
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ('approved', models.BooleanField()),
                (
                    'carbon_capture_storage_system',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to='projects.customcarboncapturestoragesystem',
                    ),
                ),
                (
                    'cement',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='projects.customcement'
                    ),
                ),
                ('emp_initiatives', models.ManyToManyField(blank=True, to='emps.CustomEmpInitiative')),
                (
                    'external_supply',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to='projects.customexternalsupply',
                    ),
                ),
                ('operation_efficiencies', models.ManyToManyField(blank=True, to='emps.CustomOperationEfficiency')),
                (
                    'steel',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='projects.customsteel'
                    ),
                ),
                (
                    'well_planner',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='complete_steps',
                        to='wells.wellplanner',
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name='WellPlannerPlannedStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                (
                    'duration',
                    models.FloatField(
                        help_text='Phase duration in days', validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    'phase',
                    models.CharField(
                        choices=[
                            ('TRANSIT', 'Transit / Stand by'),
                            ('POSITIONING', 'Positioning'),
                            ('TOP_HOLE_SECTION', 'Top hole section'),
                            ('TRANSPORT_SECTION', 'Transport section'),
                            ('RESERVOIR_SECTION', 'Reservoir section'),
                            ('COMPLETION', 'Completion'),
                            ('WELL_INTERVENTION', 'Well intervention'),
                            ('PLUG_AND_ABANDON', 'Plug and abandon'),
                            ('WAITING_ON_WEATHER', 'Waiting on weather'),
                            ('DOWNTIME', 'Downtime'),
                            ('MOBILIZING', 'Mobilizing'),
                            ('WARM_STACKED', 'Warm stacked'),
                            ('COLD_STACKED', 'Cold stacked'),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    'mode',
                    models.CharField(
                        choices=[
                            ('TRANSIT', 'Transit / Stand by'),
                            ('POS_MOORE', 'Pos moore'),
                            ('DP', 'Dynamic positioning'),
                            ('ANCHOR', 'Anchor'),
                        ],
                        max_length=16,
                    ),
                ),
                ('season', models.CharField(choices=[('SUMMER', 'Summer'), ('WINTER', 'Winter')], max_length=16)),
                (
                    'cement_volume',
                    models.FloatField(
                        blank=True,
                        help_text='Volume of cement in cubic meters',
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    'steel_weight',
                    models.FloatField(
                        blank=True,
                        help_text='Weight of steel in mT',
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    'improved_duration',
                    models.FloatField(
                        help_text='Phase improved duration in days',
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    'carbon_capture_storage_system',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to='projects.customcarboncapturestoragesystem',
                    ),
                ),
                (
                    'cement',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='projects.customcement'
                    ),
                ),
                ('emp_initiatives', models.ManyToManyField(blank=True, to='emps.CustomEmpInitiative')),
                (
                    'external_supply',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to='projects.customexternalsupply',
                    ),
                ),
                ('operation_efficiencies', models.ManyToManyField(blank=True, to='emps.CustomOperationEfficiency')),
                (
                    'steel',
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='projects.customsteel'
                    ),
                ),
                (
                    'well_planner',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='planned_steps',
                        to='wells.wellplanner',
                    ),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name='customvesseluse',
            name='vessel',
        ),
        migrations.RemoveField(
            model_name='customvesseluse',
            name='well_planner',
        ),
        migrations.RemoveField(
            model_name='wellplannerstep',
            name='carbon_capture_storage_system',
        ),
        migrations.RemoveField(
            model_name='wellplannerstep',
            name='cement',
        ),
        migrations.RemoveField(
            model_name='wellplannerstep',
            name='emp_initiatives',
        ),
        migrations.RemoveField(
            model_name='wellplannerstep',
            name='external_supply',
        ),
        migrations.RemoveField(
            model_name='wellplannerstep',
            name='operation_efficiencies',
        ),
        migrations.RemoveField(
            model_name='wellplannerstep',
            name='steel',
        ),
        migrations.RemoveField(
            model_name='wellplannerstep',
            name='well_planner',
        ),
        migrations.DeleteModel(
            name='CustomHelicopterUse',
        ),
        migrations.DeleteModel(
            name='CustomVesselUse',
        ),
        migrations.DeleteModel(
            name='WellPlannerStep',
        ),
        migrations.AddConstraint(
            model_name='wellplannerplannedstep',
            constraint=models.CheckConstraint(
                check=models.Q(('duration__gt', 0)), name='well_planner_planned_step__duration__gt_0'
            ),
        ),
        migrations.AddConstraint(
            model_name='wellplannerplannedstep',
            constraint=models.CheckConstraint(
                check=models.Q(('improved_duration__gt', 0)), name='well_planner_planned_step_improved__duration_gt_0'
            ),
        ),
        migrations.AddConstraint(
            model_name='wellplannercompletestep',
            constraint=models.CheckConstraint(
                check=models.Q(('duration__gt', 0)), name='well_planner_complete_step__duration__gt_0'
            ),
        ),
    ]
